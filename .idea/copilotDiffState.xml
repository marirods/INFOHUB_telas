<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/MainActivity.kt" />
              <option name="originalContent" value="package com.example.infohub_telas&#10;&#10;import TelaLogin&#10;import android.os.Bundle&#10;import android.preference.PreferenceManager&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import com.example.infohub_telas.model.Estabelecimento&#10;import com.example.infohub_telas.model.Promocao&#10;import com.example.infohub_telas.telas.TelaCadastro&#10;import com.example.infohub_telas.telas.TelaCadastroEstabelecimento&#10;import com.example.infohub_telas.telas.TelaCadastroPromocao&#10;import com.example.infohub_telas.telas.TelaChatDePrecos&#10;import com.example.infohub_telas.telas.TelaHome&#10;import com.example.infohub_telas.telas.TelaListaProdutos&#10;import com.example.infohub_telas.telas.TelaMeuEstabelecimento&#10;import com.example.infohub_telas.ui.theme.InfoHub_telasTheme&#10;import org.osmdroid.config.Configuration&#10;import java.util.Date&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Configuração do OpenStreetMap&#10;        Configuration.getInstance().load(&#10;            applicationContext,&#10;            PreferenceManager.getDefaultSharedPreferences(applicationContext)&#10;        )&#10;&#10;        setContent {&#10;            InfoHub_telasTheme {&#10;                val navController = rememberNavController()&#10;&#10;                val sampleProdutos = listOf(&#10;                    Promocao(nomeProduto = &quot;Hambúrguer de Picanha&quot;, categoria = &quot;Alimentação&quot;, precoPromocional = &quot;29.90&quot;, dataInicio = Date(), dataTermino = Date(System.currentTimeMillis() + 86400000), descricao = &quot;&quot;, imagemUrl = &quot;https://picsum.photos/seed/1/200&quot;),&#10;                    Promocao(nomeProduto = &quot;Tênis de Corrida&quot;, categoria = &quot;Varejo&quot;, precoPromocional = &quot;249.99&quot;, dataInicio = Date(System.currentTimeMillis() - 86400000), dataTermino = Date(System.currentTimeMillis() - 1000), descricao = &quot;&quot;, imagemUrl = &quot;https://picsum.photos/seed/2/200&quot;),&#10;                    Promocao(nomeProduto = &quot;Corte de Cabelo&quot;, categoria = &quot;Serviços&quot;, precoPromocional = &quot;45.00&quot;, dataInicio = Date(), dataTermino = Date(System.currentTimeMillis() + 5 * 86400000), descricao = &quot;&quot;, imagemUrl = &quot;https://picsum.photos/seed/3/200&quot;)&#10;                )&#10;&#10;                NavHost(&#10;                    navController = navController,&#10;                    startDestination = &quot;listaProdutos&quot; &#10;                ) {&#10;                    composable(route = &quot;home&quot;) {&#10;                        TelaHome(navController)&#10;                    }&#10;&#10;                    composable(&#10;                        route = &quot;cadastroEstabelecimento?id={id}&amp;categoria={categoria}&quot;,&#10;                        arguments = listOf(&#10;                            navArgument(&quot;id&quot;) {&#10;                                type = NavType.IntType&#10;                                defaultValue = 0&#10;                            },&#10;                            navArgument(&quot;categoria&quot;) {&#10;                                type = NavType.StringType&#10;                                nullable = true&#10;                            }&#10;                        )&#10;                    ) {&#10;                        val id = it.arguments?.getInt(&quot;id&quot;)&#10;                        val categoria = it.arguments?.getString(&quot;categoria&quot;)&#10;                        TelaCadastroEstabelecimento(navController, id, categoria)&#10;                    }&#10;&#10;                    composable(route = &quot;meuEstabelecimento&quot;) {&#10;                        val sampleEstabelecimento = Estabelecimento(&#10;                            id = 1,&#10;                            nome = &quot;Padaria do Zé&quot;,&#10;                            cnpj = &quot;12.345.678/0001-99&quot;,&#10;                            endereco = &quot;Rua das Flores, 123&quot;,&#10;                            telefone = &quot;(11) 99999-8888&quot;,&#10;                            email = &quot;contato@padariadoze.com&quot;,&#10;                            categoria = &quot;Alimentação&quot;&#10;                        )&#10;                        TelaMeuEstabelecimento(navController, sampleEstabelecimento)&#10;                    }&#10;&#10;                    composable(route = &quot;tela_cadastro&quot;) {&#10;                        TelaCadastro(navController)&#10;                    }&#10;&#10;                    composable(route = &quot;chat_precos&quot;) {&#10;                        TelaChatDePrecos(navController)&#10;                    }&#10;&#10;                    // Rotas adicionadas para navegação da TelaMeuEstabelecimento&#10;                    composable(route = &quot;homeJuridico&quot;) { Text(text = &quot;Tela Home Jurídico&quot;) }&#10;                    composable(route = &quot;listaProdutos&quot;) { TelaListaProdutos(navController, sampleProdutos) }&#10;                    composable(route = &quot;promocoes&quot;) { Text(text = &quot;Tela de Promoções&quot;) }&#10;                    composable(route = &quot;criarPromocao&quot;) { TelaCadastroPromocao(navController) }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Greeting(name: String, modifier: Modifier = Modifier) {&#10;    Text(&#10;        text = &quot;Hello $name!&quot;,&#10;        modifier = modifier&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    InfoHub_telasTheme {&#10;        Greeting(&quot;Android&quot;)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.infohub_telas&#10;&#10;import TelaLogin&#10;import android.os.Bundle&#10;import android.preference.PreferenceManager&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import com.example.infohub_telas.model.Estabelecimento&#10;import com.example.infohub_telas.model.PromocaoProduto&#10;import com.example.infohub_telas.telas.TelaCadastro&#10;import com.example.infohub_telas.telas.TelaCadastroEstabelecimento&#10;import com.example.infohub_telas.telas.TelaCadastroPromocao&#10;import com.example.infohub_telas.telas.TelaChatDePrecos&#10;import com.example.infohub_telas.telas.TelaHome&#10;import com.example.infohub_telas.telas.TelaListaProdutos&#10;import com.example.infohub_telas.telas.TelaMeuEstabelecimento&#10;import com.example.infohub_telas.ui.theme.InfoHub_telasTheme&#10;import org.osmdroid.config.Configuration&#10;import java.util.Date&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Configuração do OpenStreetMap&#10;        Configuration.getInstance().load(&#10;            applicationContext,&#10;            PreferenceManager.getDefaultSharedPreferences(applicationContext)&#10;        )&#10;&#10;        setContent {&#10;            InfoHub_telasTheme {&#10;                val navController = rememberNavController()&#10;&#10;                val sampleProdutos = listOf(&#10;                    PromocaoProduto(&#10;                        nomeProduto = &quot;Hambúrguer de Picanha&quot;,&#10;                        categoria = &quot;Alimentação&quot;,&#10;                        precoPromocional = &quot;29.90&quot;,&#10;                        dataInicio = Date(),&#10;                        dataTermino = Date(System.currentTimeMillis() + 86400000),&#10;                        descricao = &quot;&quot;,&#10;                        imagemUrl = &quot;https://picsum.photos/seed/1/200&quot;&#10;                    ),&#10;                    PromocaoProduto(&#10;                        nomeProduto = &quot;Tênis de Corrida&quot;,&#10;                        categoria = &quot;Varejo&quot;,&#10;                        precoPromocional = &quot;249.99&quot;,&#10;                        dataInicio = Date(System.currentTimeMillis() - 86400000),&#10;                        dataTermino = Date(System.currentTimeMillis() - 1000),&#10;                        descricao = &quot;&quot;,&#10;                        imagemUrl = &quot;https://picsum.photos/seed/2/200&quot;&#10;                    ),&#10;                    PromocaoProduto(&#10;                        nomeProduto = &quot;Corte de Cabelo&quot;,&#10;                        categoria = &quot;Serviços&quot;,&#10;                        precoPromocional = &quot;45.00&quot;,&#10;                        dataInicio = Date(),&#10;                        dataTermino = Date(System.currentTimeMillis() + 5 * 86400000),&#10;                        descricao = &quot;&quot;,&#10;                        imagemUrl = &quot;https://picsum.photos/seed/3/200&quot;&#10;                    )&#10;                )&#10;&#10;                NavHost(&#10;                    navController = navController,&#10;                    startDestination = &quot;listaProdutos&quot; &#10;                ) {&#10;                    composable(route = &quot;home&quot;) {&#10;                        TelaHome(navController)&#10;                    }&#10;&#10;                    composable(&#10;                        route = &quot;cadastroEstabelecimento?id={id}&amp;categoria={categoria}&quot;,&#10;                        arguments = listOf(&#10;                            navArgument(&quot;id&quot;) {&#10;                                type = NavType.IntType&#10;                                defaultValue = 0&#10;                            },&#10;                            navArgument(&quot;categoria&quot;) {&#10;                                type = NavType.StringType&#10;                                nullable = true&#10;                            }&#10;                        )&#10;                    ) {&#10;                        val id = it.arguments?.getInt(&quot;id&quot;)&#10;                        val categoria = it.arguments?.getString(&quot;categoria&quot;)&#10;                        TelaCadastroEstabelecimento(navController, id, categoria)&#10;                    }&#10;&#10;                    composable(route = &quot;meuEstabelecimento&quot;) {&#10;                        val sampleEstabelecimento = Estabelecimento(&#10;                            id = 1,&#10;                            nome = &quot;Padaria do Zé&quot;,&#10;                            cnpj = &quot;12.345.678/0001-99&quot;,&#10;                            endereco = &quot;Rua das Flores, 123&quot;,&#10;                            telefone = &quot;(11) 99999-8888&quot;,&#10;                            email = &quot;contato@padariadoze.com&quot;,&#10;                            categoria = &quot;Alimentação&quot;&#10;                        )&#10;                        TelaMeuEstabelecimento(navController, sampleEstabelecimento)&#10;                    }&#10;&#10;                    composable(route = &quot;tela_cadastro&quot;) {&#10;                        TelaCadastro(navController)&#10;                    }&#10;&#10;                    composable(route = &quot;chat_precos&quot;) {&#10;                        TelaChatDePrecos(navController)&#10;                    }&#10;&#10;                    // Rotas adicionadas para navegação da TelaMeuEstabelecimento&#10;                    composable(route = &quot;homeJuridico&quot;) { Text(text = &quot;Tela Home Jurídico&quot;) }&#10;                    composable(route = &quot;listaProdutos&quot;) { TelaListaProdutos(navController, sampleProdutos) }&#10;                    composable(route = &quot;promocoes&quot;) { Text(text = &quot;Tela de Promoções&quot;) }&#10;                    composable(route = &quot;criarPromocao&quot;) { TelaCadastroPromocao(navController) }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Greeting(name: String, modifier: Modifier = Modifier) {&#10;    Text(&#10;        text = &quot;Hello $name!&quot;,&#10;        modifier = modifier&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    InfoHub_telasTheme {&#10;        Greeting(&quot;Android&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/components/MyTopAppBar.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/components/MyTopAppBar.kt" />
              <option name="updatedContent" value="package com.example.infohub_telas.components&#10;&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import com.example.infohub_telas.ui.theme.PrimaryOrange&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DashboardTopAppBar(&#10;    title: String,&#10;    navigationIcon: ImageVector? = null,&#10;    onNavigationIconClick: (() -&gt; Unit)? = null,&#10;    actions: @Composable (() -&gt; Unit)? = null&#10;) {&#10;    TopAppBar(&#10;        title = {&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.titleLarge&#10;            )&#10;        },&#10;        navigationIcon = {&#10;            if (navigationIcon != null &amp;&amp; onNavigationIconClick != null) {&#10;                IconButton(onClick = onNavigationIconClick) {&#10;                    Icon(&#10;                        imageVector = navigationIcon,&#10;                        contentDescription = &quot;Voltar&quot;&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        actions = { actions?.invoke() },&#10;        colors = TopAppBarDefaults.topAppBarColors(&#10;            containerColor = PrimaryOrange,&#10;            titleContentColor = MaterialTheme.colorScheme.onPrimary,&#10;            navigationIconContentColor = MaterialTheme.colorScheme.onPrimary,&#10;            actionIconContentColor = MaterialTheme.colorScheme.onPrimary&#10;        )&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/model/DashboardData.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/model/DashboardData.kt" />
              <option name="originalContent" value="package com.example.infohub_telas.model&#10;&#10;import java.time.LocalDate&#10;&#10;data class DashboardData(&#10;    val totalVendasMes: Double,&#10;    val totalPromocoesAtivas: Int,&#10;    val totalProdutos: Int,&#10;    val avaliacaoMedia: Float,&#10;    val ultimasPromocoes: List&lt;Promocao&gt;&#10;) {&#10;    fun getFormattedVendas(): String = &quot;R$ %.2f&quot;.format(totalVendasMes)&#10;    fun getFormattedAvaliacao(): String = &quot;%.1f&quot;.format(avaliacaoMedia)&#10;&#10;    companion object {&#10;        fun getPreview() = DashboardData(&#10;            totalVendasMes = 15420.50,&#10;            totalPromocoesAtivas = 8,&#10;            totalProdutos = 143,&#10;            avaliacaoMedia = 4.5f,&#10;            ultimasPromocoes = listOf(&#10;                Promocao(&#10;                    nome = &quot;Promoção de Verão&quot;,&#10;                    data = LocalDate.now(),&#10;                    status = StatusPromocao.ATIVA,&#10;                    desconto = 20&#10;                ),&#10;                Promocao(&#10;                    nome = &quot;Black Friday&quot;,&#10;                    data = LocalDate.now().plusDays(30),&#10;                    status = StatusPromocao.AGENDADA,&#10;                    desconto = 50&#10;                ),&#10;                Promocao(&#10;                    nome = &quot;Liquidação de Inverno&quot;,&#10;                    data = LocalDate.now().minusDays(15),&#10;                    status = StatusPromocao.ENCERRADA,&#10;                    desconto = 30&#10;                )&#10;            )&#10;        )&#10;    }&#10;}&#10;&#10;data class Promocao(&#10;    val nome: String,&#10;    val data: LocalDate,&#10;    val status: StatusPromocao,&#10;    val desconto: Int&#10;)&#10;&#10;enum class StatusPromocao {&#10;    ATIVA,&#10;    AGENDADA,&#10;    ENCERRADA&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.infohub_telas.model&#10;&#10;import java.time.LocalDate&#10;&#10;data class DashboardData(&#10;    val totalVendasMes: Double,&#10;    val totalPromocoesAtivas: Int,&#10;    val totalProdutos: Int,&#10;    val avaliacaoMedia: Float,&#10;    val ultimasPromocoes: List&lt;Promocao&gt;&#10;) {&#10;    fun getFormattedVendas(): String = &quot;R$ %.2f&quot;.format(totalVendasMes)&#10;    fun getFormattedAvaliacao(): String = &quot;%.1f&quot;.format(avaliacaoMedia)&#10;&#10;    companion object {&#10;        fun getPreview() = DashboardData(&#10;            totalVendasMes = 15420.50,&#10;            totalPromocoesAtivas = 8,&#10;            totalProdutos = 143,&#10;            avaliacaoMedia = 4.5f,&#10;            ultimasPromocoes = listOf(&#10;                Promocao(&#10;                    nome = &quot;Promoção de Verão&quot;,&#10;                    data = LocalDate.now(),&#10;                    status = StatusPromocao.ATIVA,&#10;                    desconto = 20&#10;                ),&#10;                Promocao(&#10;                    nome = &quot;Black Friday&quot;,&#10;                    data = LocalDate.now().plusDays(30),&#10;                    status = StatusPromocao.AGENDADA,&#10;                    desconto = 50&#10;                ),&#10;                Promocao(&#10;                    nome = &quot;Liquidação de Inverno&quot;,&#10;                    data = LocalDate.now().minusDays(15),&#10;                    status = StatusPromocao.ENCERRADA,&#10;                    desconto = 30&#10;                )&#10;            )&#10;        )&#10;    }&#10;}&#10;&#10;data class Promocao(&#10;    val nome: String,&#10;    val data: LocalDate,&#10;    val status: StatusPromocao,&#10;    val desconto: Int&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/model/Models.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/model/Models.kt" />
              <option name="updatedContent" value="package com.example.infohub_telas.model&#10;&#10;import java.time.LocalDate&#10;import java.util.Date&#10;&#10;enum class StatusPromocao {&#10;    ATIVA,&#10;    AGENDADA,&#10;    ENCERRADA&#10;}&#10;&#10;data class DashboardData(&#10;    val totalVendasMes: Double,&#10;    val totalPromocoesAtivas: Int,&#10;    val totalProdutos: Int,&#10;    val avaliacaoMedia: Float,&#10;    val ultimasPromocoes: List&lt;Promocao&gt;&#10;) {&#10;    fun getFormattedVendas(): String = &quot;R$ %.2f&quot;.format(totalVendasMes)&#10;    fun getFormattedAvaliacao(): String = &quot;%.1f&quot;.format(avaliacaoMedia)&#10;&#10;    companion object {&#10;        fun getPreview() = DashboardData(&#10;            totalVendasMes = 15420.50,&#10;            totalPromocoesAtivas = 8,&#10;            totalProdutos = 143,&#10;            avaliacaoMedia = 4.5f,&#10;            ultimasPromocoes = listOf(&#10;                Promocao(&#10;                    nome = &quot;Promoção de Verão&quot;,&#10;                    data = LocalDate.now(),&#10;                    status = StatusPromocao.ATIVA,&#10;                    desconto = 20&#10;                ),&#10;                Promocao(&#10;                    nome = &quot;Black Friday&quot;,&#10;                    data = LocalDate.now().plusDays(30),&#10;                    status = StatusPromocao.AGENDADA,&#10;                    desconto = 50&#10;                ),&#10;                Promocao(&#10;                    nome = &quot;Liquidação de Inverno&quot;,&#10;                    data = LocalDate.now().minusDays(15),&#10;                    status = StatusPromocao.ENCERRADA,&#10;                    desconto = 30&#10;                )&#10;            )&#10;        )&#10;    }&#10;}&#10;&#10;data class Promocao(&#10;    val nome: String,&#10;    val data: LocalDate,&#10;    val status: StatusPromocao,&#10;    val desconto: Int&#10;)&#10;&#10;data class PromocaoProduto(&#10;    val nomeProduto: String,&#10;    val categoria: String,&#10;    val precoPromocional: String,&#10;    val dataInicio: Date,&#10;    val dataTermino: Date,&#10;    val descricao: String,&#10;    val imagemUrl: String,&#10;    val status: StatusPromocao = StatusPromocao.ATIVA&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/model/Promocao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/model/Promocao.kt" />
              <option name="updatedContent" value="package com.example.infohub_telas.model&#10;&#10;// This class has been moved to Models.kt to avoid duplication&#10;// If you need to use Promocao, please import it from Models.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/model/PromocaoProduto.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/model/PromocaoProduto.kt" />
              <option name="updatedContent" value="package com.example.infohub_telas.model&#10;&#10;// This class has been moved to Models.kt to avoid duplication" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/model/StatusPromocao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/model/StatusPromocao.kt" />
              <option name="updatedContent" value="package com.example.infohub_telas.model&#10;&#10;// This enum has been moved to Models.kt to avoid duplication" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/telas/ConfiguracaoPerfil.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/telas/ConfiguracaoPerfil.kt" />
              <option name="originalContent" value="package com.example.infohub_telas.telas&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Business&#10;import androidx.compose.material.icons.filled.Description&#10;import androidx.compose.material.icons.filled.Email&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.Phone&#10;import androidx.compose.material.icons.filled.PhotoCamera&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.infohub_telas.components.CustomTextField&#10;import com.example.infohub_telas.components.DashboardTopAppBar&#10;import com.example.infohub_telas.model.Empresa&#10;import com.example.infohub_telas.ui.theme.BackgroundGray&#10;import com.example.infohub_telas.ui.theme.PrimaryOrange&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ConfiguracaoPerfil(&#10;    navController: NavController,&#10;    empresa: Empresa,&#10;    onSaveChanges: (Empresa) -&gt; Unit&#10;) {&#10;    var nome by remember { mutableStateOf(empresa.nome) }&#10;    var email by remember { mutableStateOf(empresa.email) }&#10;    var telefone by remember { mutableStateOf(empresa.telefone) }&#10;    var endereco by remember { mutableStateOf(empresa.endereco) }&#10;    var descricao by remember { mutableStateOf(empresa.descricao) }&#10;    var logoUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;&#10;    // Validação de campos&#10;    var nomeError by remember { mutableStateOf(false) }&#10;    var emailError by remember { mutableStateOf(false) }&#10;    var telefoneError by remember { mutableStateOf(false) }&#10;    var enderecoError by remember { mutableStateOf(false) }&#10;&#10;    val scrollState = rememberScrollState()&#10;&#10;    // Image picker launcher&#10;    val imagePicker = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        uri?.let { logoUri = it }&#10;    }&#10;&#10;    fun validateFields(): Boolean {&#10;        nomeError = nome.isBlank()&#10;        emailError = email.isBlank() || !email.contains(&quot;@&quot;)&#10;        telefoneError = telefone.isBlank()&#10;        enderecoError = endereco.isBlank()&#10;&#10;        return !(nomeError || emailError || telefoneError || enderecoError)&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            DashboardTopAppBar(&#10;                title = &quot;Configuração do Perfil&quot;,&#10;                navigationIcon = Icons.AutoMirrored.Filled.ArrowBack,&#10;                onNavigationIconClick = { navController.popBackStack() }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(scrollState)&#10;                .background(Color(0xFFF5F5F5))&#10;        ) {&#10;            // Logo section&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 24.dp),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(120.dp)&#10;                            .clip(CircleShape)&#10;                            .background(Color(0xFF1976D2)),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Business,&#10;                            contentDescription = &quot;Logo da empresa&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(64.dp)&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    OutlinedButton(&#10;                        onClick = { imagePicker.launch(&quot;image/*&quot;) },&#10;                        modifier = Modifier.padding(horizontal = 16.dp)&#10;                    ) {&#10;                        Icon(&#10;                            Icons.Default.PhotoCamera,&#10;                            contentDescription = null,&#10;                            tint = Color(0xFF1976D2),&#10;                            modifier = Modifier.padding(end = 8.dp)&#10;                        )&#10;                        Text(&quot;Alterar Logo&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Form fields&#10;            CustomTextField(&#10;                value = nome,&#10;                onValueChange = { nome = it; nomeError = false },&#10;                label = &quot;Nome da Empresa&quot;,&#10;                icon = Icons.Default.Business,&#10;                isError = nomeError,&#10;                errorMessage = &quot;Nome é obrigatório&quot;&#10;            )&#10;&#10;            CustomTextField(&#10;                value = email,&#10;                onValueChange = { email = it; emailError = false },&#10;                label = &quot;E-mail&quot;,&#10;                icon = Icons.Default.Email,&#10;                isError = emailError,&#10;                errorMessage = &quot;E-mail inválido&quot;,&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Email,&#10;                    imeAction = ImeAction.Next&#10;                )&#10;            )&#10;&#10;            CustomTextField(&#10;                value = telefone,&#10;                onValueChange = { telefone = it; telefoneError = false },&#10;                label = &quot;Telefone&quot;,&#10;                icon = Icons.Default.Phone,&#10;                isError = telefoneError,&#10;                errorMessage = &quot;Telefone é obrigatório&quot;,&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Phone,&#10;                    imeAction = ImeAction.Next&#10;                )&#10;            )&#10;&#10;            CustomTextField(&#10;                value = endereco,&#10;                onValueChange = { endereco = it; enderecoError = false },&#10;                label = &quot;Endereço&quot;,&#10;                icon = Icons.Default.LocationOn,&#10;                isError = enderecoError,&#10;                errorMessage = &quot;Endereço é obrigatório&quot;&#10;            )&#10;&#10;            CustomTextField(&#10;                value = descricao,&#10;                onValueChange = { descricao = it },&#10;                label = &quot;Descrição do Negócio&quot;,&#10;                icon = Icons.Default.Description,&#10;                maxLines = 3&#10;            )&#10;&#10;            // Buttons&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                OutlinedButton(&#10;                    onClick = { navController.popBackStack() },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;Cancelar&quot;)&#10;                }&#10;&#10;                Button(&#10;                    onClick = {&#10;                        if (validateFields()) {&#10;                            val updatedEmpresa = empresa.copy(&#10;                                nome = nome,&#10;                                email = email,&#10;                                telefone = telefone,&#10;                                endereco = endereco,&#10;                                descricao = descricao,&#10;                                logoUrl = logoUri?.toString() ?: empresa.logoUrl&#10;                            )&#10;                            onSaveChanges(updatedEmpresa)&#10;                            navController.popBackStack()&#10;                        }&#10;                    },&#10;                    modifier = Modifier.weight(1f),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = Color(0xFF1976D2)&#10;                    )&#10;                ) {&#10;                    Text(&quot;Salvar&quot;)&#10;                }&#10;            }&#10;&#10;            // Bottom spacing&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, showSystemUi = true)&#10;@Composable&#10;fun ConfiguracaoPerfilPreview() {&#10;    val empresaSample = Empresa(&#10;        nome = &quot;Tech Solutions Ltda&quot;,&#10;        cnpj = &quot;12.345.678/0001-99&quot;,&#10;        email = &quot;contato@techsolutions.com&quot;,&#10;        telefone = &quot;(11) 99999-9999&quot;,&#10;        endereco = &quot;Rua Exemplo, 123, São Paulo&quot;,&#10;        setor = &quot;Tecnologia&quot;,&#10;        descricao = &quot;Empresa de soluções tecnológicas.&quot;,&#10;        logoUrl = &quot;&quot;&#10;    )&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        ConfiguracaoPerfil(&#10;            navController = rememberNavController(),&#10;            empresa = empresaSample,&#10;            onSaveChanges = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.infohub_telas.telas&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Business&#10;import androidx.compose.material.icons.filled.Description&#10;import androidx.compose.material.icons.filled.Email&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.Phone&#10;import androidx.compose.material.icons.filled.PhotoCamera&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.infohub_telas.components.CustomTextField&#10;import com.example.infohub_telas.components.DashboardTopAppBar&#10;import com.example.infohub_telas.model.Empresa&#10;import com.example.infohub_telas.ui.theme.BackgroundGray&#10;import com.example.infohub_telas.ui.theme.PrimaryOrange&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ConfiguracaoPerfil(&#10;    navController: NavController,&#10;    empresa: Empresa,&#10;    onSaveChanges: (Empresa) -&gt; Unit&#10;) {&#10;    var nome by remember { mutableStateOf(empresa.nome) }&#10;    var email by remember { mutableStateOf(empresa.email) }&#10;    var telefone by remember { mutableStateOf(empresa.telefone) }&#10;    var endereco by remember { mutableStateOf(empresa.endereco) }&#10;    var descricao by remember { mutableStateOf(empresa.descricao) }&#10;    var logoUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;&#10;    // Validação de campos&#10;    var nomeError by remember { mutableStateOf(false) }&#10;    var emailError by remember { mutableStateOf(false) }&#10;    var telefoneError by remember { mutableStateOf(false) }&#10;    var enderecoError by remember { mutableStateOf(false) }&#10;&#10;    val scrollState = rememberScrollState()&#10;&#10;    // Image picker launcher&#10;    val imagePicker = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        uri?.let { logoUri = it }&#10;    }&#10;&#10;    fun validateFields(): Boolean {&#10;        nomeError = nome.isBlank()&#10;        emailError = email.isBlank() || !email.contains(&quot;@&quot;)&#10;        telefoneError = telefone.isBlank()&#10;        enderecoError = endereco.isBlank()&#10;&#10;        return !(nomeError || emailError || telefoneError || enderecoError)&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            DashboardTopAppBar(&#10;                title = &quot;Configuração do Perfil&quot;,&#10;                navigationIcon = Icons.AutoMirrored.Filled.ArrowBack,&#10;                onNavigationIconClick = { navController.popBackStack() }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(scrollState)&#10;                .background(BackgroundGray)&#10;        ) {&#10;            // Logo section&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 24.dp),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(120.dp)&#10;                            .clip(CircleShape)&#10;                            .background(PrimaryOrange),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Business,&#10;                            contentDescription = &quot;Logo da empresa&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(64.dp)&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    OutlinedButton(&#10;                        onClick = { imagePicker.launch(&quot;image/*&quot;) },&#10;                        modifier = Modifier.padding(horizontal = 16.dp)&#10;                    ) {&#10;                        Icon(&#10;                            Icons.Default.PhotoCamera,&#10;                            contentDescription = null,&#10;                            tint = PrimaryOrange,&#10;                            modifier = Modifier.padding(end = 8.dp)&#10;                        )&#10;                        Text(&quot;Alterar Logo&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Form fields&#10;            CustomTextField(&#10;                value = nome,&#10;                onValueChange = { nome = it; nomeError = false },&#10;                label = &quot;Nome da Empresa&quot;,&#10;                icon = Icons.Default.Business,&#10;                isError = nomeError,&#10;                errorMessage = &quot;Nome é obrigatório&quot;&#10;            )&#10;&#10;            CustomTextField(&#10;                value = email,&#10;                onValueChange = { email = it; emailError = false },&#10;                label = &quot;E-mail&quot;,&#10;                icon = Icons.Default.Email,&#10;                isError = emailError,&#10;                errorMessage = &quot;E-mail inválido&quot;,&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Email,&#10;                    imeAction = ImeAction.Next&#10;                )&#10;            )&#10;&#10;            CustomTextField(&#10;                value = telefone,&#10;                onValueChange = { telefone = it; telefoneError = false },&#10;                label = &quot;Telefone&quot;,&#10;                icon = Icons.Default.Phone,&#10;                isError = telefoneError,&#10;                errorMessage = &quot;Telefone é obrigatório&quot;,&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Phone,&#10;                    imeAction = ImeAction.Next&#10;                )&#10;            )&#10;&#10;            CustomTextField(&#10;                value = endereco,&#10;                onValueChange = { endereco = it; enderecoError = false },&#10;                label = &quot;Endereço&quot;,&#10;                icon = Icons.Default.LocationOn,&#10;                isError = enderecoError,&#10;                errorMessage = &quot;Endereço é obrigatório&quot;&#10;            )&#10;&#10;            CustomTextField(&#10;                value = descricao,&#10;                onValueChange = { descricao = it },&#10;                label = &quot;Descrição do Negócio&quot;,&#10;                icon = Icons.Default.Description,&#10;                maxLines = 3&#10;            )&#10;&#10;            // Buttons&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                OutlinedButton(&#10;                    onClick = { navController.popBackStack() },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&quot;Cancelar&quot;)&#10;                }&#10;&#10;                Button(&#10;                    onClick = {&#10;                        if (validateFields()) {&#10;                            val updatedEmpresa = empresa.copy(&#10;                                nome = nome,&#10;                                email = email,&#10;                                telefone = telefone,&#10;                                endereco = endereco,&#10;                                descricao = descricao,&#10;                                logoUrl = logoUri?.toString() ?: empresa.logoUrl&#10;                            )&#10;                            onSaveChanges(updatedEmpresa)&#10;                            navController.popBackStack()&#10;                        }&#10;                    },&#10;                    modifier = Modifier.weight(1f),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = PrimaryOrange&#10;                    )&#10;                ) {&#10;                    Text(&quot;Salvar&quot;)&#10;                }&#10;            }&#10;&#10;            // Bottom spacing&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, showSystemUi = true)&#10;@Composable&#10;fun ConfiguracaoPerfilPreview() {&#10;    val empresaSample = Empresa(&#10;        nome = &quot;Tech Solutions Ltda&quot;,&#10;        cnpj = &quot;12.345.678/0001-99&quot;,&#10;        email = &quot;contato@techsolutions.com&quot;,&#10;        telefone = &quot;(11) 99999-9999&quot;,&#10;        endereco = &quot;Rua Exemplo, 123, São Paulo&quot;,&#10;        setor = &quot;Tecnologia&quot;,&#10;        descricao = &quot;Empresa de soluções tecnológicas.&quot;,&#10;        logoUrl = &quot;&quot;&#10;    )&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        ConfiguracaoPerfil(&#10;            navController = rememberNavController(),&#10;            empresa = empresaSample,&#10;            onSaveChanges = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/ui/theme/Color.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/infohub_telas/ui/theme/Color.kt" />
              <option name="updatedContent" value="package com.example.infohub_telas.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;// Primary Brand Colors&#10;val PrimaryOrange = Color(0xFFF2811D)&#10;val SecondaryOrange = Color(0xFFFF9800)&#10;val BackgroundGray = Color(0xFFF5F5F5)&#10;val OnSurfaceGray = Color(0xFF757575)&#10;val DarkText = Color(0xFF333333)&#10;&#10;// Light Theme Colors&#10;val primaryLight = PrimaryOrange&#10;val onPrimaryLight = Color.White&#10;val secondaryLight = SecondaryOrange&#10;val onSecondaryLight = Color.White&#10;val tertiaryLight = Color(0xFFFF5722)&#10;val onTertiaryLight = Color.White&#10;val backgroundLight = BackgroundGray&#10;val onBackgroundLight = DarkText&#10;val surfaceLight = Color.White&#10;val onSurfaceLight = DarkText&#10;val primaryContainerLight = PrimaryOrange.copy(alpha = 0.1f)&#10;val onPrimaryContainerLight = PrimaryOrange&#10;val errorLight = Color(0xFFB00020)&#10;val onErrorLight = Color.White&#10;&#10;// Dark Theme Colors&#10;val primaryDark = PrimaryOrange&#10;val onPrimaryDark = Color.White&#10;val secondaryDark = SecondaryOrange&#10;val onSecondaryDark = Color.White&#10;val tertiaryDark = Color(0xFFFF5722)&#10;val onTertiaryDark = Color.White&#10;val backgroundDark = Color(0xFF121212)&#10;val onBackgroundDark = Color.White&#10;val surfaceDark = Color(0xFF1E1E1E)&#10;val onSurfaceDark = Color.White&#10;val primaryContainerDark = PrimaryOrange.copy(alpha = 0.2f)&#10;val onPrimaryContainerDark = PrimaryOrange&#10;val errorDark = Color(0xFFCF6679)&#10;val onErrorDark = Color.White" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>